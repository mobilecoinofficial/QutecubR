Animated QR-code Rust
This is a tool for creating image and animated QR-codes for use on websites. It aims to be performant, flexible, and configurable enough to use in an automated fashion.

Specifically, this is inspired by amazing-qr, which is not performant enough to use, taking ~60 seconds to generate gifs. Better performance and MP4 support make it much more usable in the wild.

Buildup is roughly:
1. Generate QR Codes
2. Output as PNG
3. Input PNG Files
4. Combine QR Code and Input File
5. Output as Video
6. Read Video
7. Combine Input Video and Output Video
8. Make it Fast


Possible Extensions:
• Can do error correction tricks.


Prior Art:
https://research.swtch.com/qart
amazing-qr https://github.com/x-hw/amazing-qr
qrcode-rust https://github.com/kennytm/qrcode-rust


Libraries:
qrcode-rust https://github.com/kennytm/qrcode-rust
png https://github.com/image-rs/image-png
gif https://github.com/image-rs/image-gif
mp4-rust https://github.com/alfg/mp4-rust
jpeg https://github.com/image-rs/jpeg-decoder


Useful Links:
https://en.wikipedia.org/wiki/QR_code
https://research.swtch.com/field
https://github.com/image-rs
http://qrcode.meetheed.com/qrcode_art.php


Personal Goals:
• Learn deeply how QR codes work.
• Become more familiar with rust.
• Start building inroads to MP4 output from rust.


Notes:
• We should be able to work at any common (LMQH) error correction level.
• Using MP4 would be a better choice than gif given modern platforms.
  └─ Maybe can fuck with frames, ie: only one I-frame at start?
• Main observation with amazing-qr is that it uses regular black and white grid with small dots to maintain the QR code.
• A lazier method is to just throw an animation in the center and let error correction figure out the missing data.
• A less lazy method is to draw whatever we want in the data portion and use error correction to correct it to the data we want.
• Another lazy method is to have the QR code only be valid at certain points in the animation and let the auto-scan feature of devices grab a valid frame at some point.
  └─ Might have to make sure we aren't accidentally relying on this too much.
• QR codes can be colored, they tend to want black to be replaced by colors and leave white alone.
• MicroQR codes don't seem to be widly supported.
• Inverting QR codes is not widely supported.
• Mirroring QR codes is not widely supported.
• Rotating QR codes is perfectly fine.

Unicode characters to peper and solt as you plese:
• ─ │ ┌ ┐ └ ┘ ├ ┤ ┬ ┴ ┼ ╴ ╵ ╶ ╷ ╭ ╮ ╯ ╰ ╱ ╲ ╳
